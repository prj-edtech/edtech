generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  auth0Id   String   @unique
  email     String
  name      String
  role      String
  picture   String?
  createdAt DateTime @default(now())

  auditLogs AuditLog[]
  ChangeLog ChangeLog[]
}

model Board {
  id           String   @id @default(cuid())
  partitionKey String   @default("Board")
  sortKey      String // e.g., "CBSE"
  displayName  String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  updatedBy    String

  boardJson Json

  // Relationship to standards (one-to-many)
  standards     Standard[]
  subjects      Subject[]
  Section       Section[]
  QuestionPaper QuestionPaper[]
}

model Standard {
  id           String   @id @default(cuid())
  partitionKey String
  sortKey      String // e.g., "X", "XI", "XII"
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  updatedBy    String

  standardJson Json

  boardId       String
  board         Board           @relation(fields: [boardId], references: [id], onDelete: Cascade)
  subjects      Subject[]
  Section       Section[]
  QuestionPaper QuestionPaper[]

  @@unique([partitionKey, sortKey])
  @@index([partitionKey, sortKey])
}

model AuditLog {
  id          String   @id @default(cuid())
  entityType  String
  entityId    String
  action      String
  performedBy String
  performedAt DateTime @default(now())
  details     Json?
  createdAt   DateTime @default(now())

  user User? @relation(fields: [performedBy], references: [auth0Id], onDelete: Cascade)
}

model Subject {
  id           String   @id @default(cuid())
  partitionKey String // e.g. "Subject#CBSE#X"
  sortKey      String // e.g. "Mathematics"
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  updatedBy    String

  subjectJson Json // strict production JSON for downstream systems

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  standardId    String
  standard      Standard        @relation(fields: [standardId], references: [id], onDelete: Cascade)
  Section       Section[]
  QuestionPaper QuestionPaper[]

  @@unique([partitionKey, sortKey])
  @@index([partitionKey, sortKey])
}

model Section {
  id           String   @id @default(cuid())
  partitionKey String // e.g. "Section#CBSE#X"
  sortKey      String // e.g. "Mathematics#<Base62UUID>"
  priority     Int? // optional numeric ordering (nullable as per SOW flexibility)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  updatedBy    String

  sectionJson Json // strict production JSON structure for downstream systems

  // Relations
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  standardId String
  standard   Standard @relation(fields: [standardId], references: [id], onDelete: Cascade)

  subjectId String
  subject   Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  Topic     Topic[]
  SubTopic  SubTopic[]

  @@unique([partitionKey, sortKey])
  @@index([partitionKey, sortKey])
  @@index([isActive])
}

model Topic {
  id           String   @id @default(cuid()) // internal database PK
  partitionKey String // e.g. "Topic#CBSE#XII"
  sortKey      String // e.g. "Mathematics#<SECTION_ID>#<TOPIC_ID>"
  topicId      String   @unique // Base62 UUID (22-char, your external identifier)
  sectionId    String // FK to Section
  priority     Int // numeric ordering within section
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  updatedBy    String

  topicJson Json // strict production JSON structure

  // Relations
  section  Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  SubTopic SubTopic[]

  @@unique([partitionKey, sortKey])
  @@index([partitionKey, sortKey])
  @@index([isActive])
}

model SubTopic {
  id                  String       @id @default(cuid()) // internal DB PK
  partitionKey        String // e.g. "SubTopic#CBSE#XII"
  sortKey             String // e.g. "Mathematics#<SECTION_ID>#<TOPIC_ID>#<SUBTOPIC_ID>"
  subTopicId          String       @unique // Base62 UUID external identifier (22-char)
  topicId             String // FK to Topic
  sectionId           String // redundant denormalized FK (for easier querying)
  priority            Int
  subtopicContentPath String // Supabase storage path to JSON content file
  isActive            Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  createdBy           String
  updatedBy           String
  review              ReviewStatus @default(PENDING)

  subTopicJson Json // strict production JSON snapshot

  // Relations
  topic   Topic   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([partitionKey, sortKey])
  @@index([partitionKey, sortKey])
  @@index([isActive])
}

model QuestionPaper {
  id           String   @id @default(cuid())
  partitionKey String // e.g. "QuestionPaper#CBSE#XII"
  sortKey      String // e.g. "Mathematics#2025#MAR"
  year         String
  month        String // e.g. JAN, FEB, MAR...
  totalMarks   Int
  attributes   Json // { displayName, notes, heading, questionPaperInstruction }
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  updatedBy    String

  questionPaperJson Json //  full snapshot JSON of critical fields

  // Relations
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  standardId String
  standard   Standard @relation(fields: [standardId], references: [id], onDelete: Cascade)

  subjectId String
  subject   Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  Question  Question[]

  @@unique([partitionKey, sortKey])
  @@index([partitionKey, sortKey])
  @@index([isActive])
  @@index([year])
}

model Question {
  id                  String   @id @default(cuid())
  partitionKey        String
  sortKey             String
  year                String
  month               String
  questionId          String   @unique
  questionPaperId     String
  sectionId           String
  topicId             String
  subTopicId          String
  marks               Int
  priority            Int
  questionType        String
  questionContentPath String
  questionAnswerPath  String
  attributes          Json
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdBy           String
  updatedBy           String
  questionJson        Json?

  // Relations
  questionPaper QuestionPaper @relation(fields: [questionPaperId], references: [id], onDelete: Cascade)

  @@unique([partitionKey, sortKey])
  @@index([partitionKey, sortKey])
  @@index([questionPaperId])
}

model ChangeLog {
  changeLogId  String    @id @default(uuid()) // Unique identifier for each Change Log
  entityType   String // The type of entity being changed (e.g., BOARD, QUESTION_PAPER)
  entityId     String // The ID of the affected entity (e.g., boardId, questionPaperId)
  changeType   String // The type of change: CREATE, UPDATE, DELETE
  changeStatus String // Status of the change: REQUESTED, REVIEWED, APPROVED, REJECTED, AUTO_APPROVED
  submittedBy  String // User ID of the submitter
  reviewedBy   String? // User ID of the reviewer (if applicable)
  approvedBy   String? // User ID of the approver (if applicable)
  submittedAt  DateTime // Timestamp when the change was submitted
  reviewedAt   DateTime? // Timestamp when the change was reviewed
  approvedAt   DateTime? // Timestamp when the change was approved
  jsonData     Json // JSON data representing the state of the entity at the time of the change
  movedToDev   Boolean   @default(false) // Whether the change has been deployed to Dev environment
  movedToQA    Boolean   @default(false) // Whether the change has been deployed to QA environment
  movedToProd  Boolean   @default(false) // Whether the change has been deployed to Production environment
  notes        String? // Optional notes for the reviewer/approver

  // Audit Trail related fields
  createdBy String // User ID who created the ChangeLog entry
  createdAt DateTime  @default(now()) // Timestamp for the creation of the Change Log entry
  updatedBy String? // User ID who last updated the ChangeLog entry
  updatedAt DateTime? // Timestamp for when the entry was last updated

  // Relation to the user who performed the action
  User User @relation(fields: [submittedBy], references: [auth0Id], onDelete: Cascade)
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}
